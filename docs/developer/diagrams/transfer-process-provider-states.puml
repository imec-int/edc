'
'  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
'
'  This program and the accompanying materials are made available under the
'  terms of the Apache License, Version 2.0 which is available at
'  https://www.apache.org/licenses/LICENSE-2.0
'
'  SPDX-License-Identifier: Apache-2.0
'
'  Contributors:
'       Bayerische Motoren Werke Aktiengesellschaft (BMW AG) - Initial Draft
'
'

@startuml

state "INITIAL" as INITIAL_provider {
}
state "STARTING" as STARTING_provider {
}
state "STARTED" as STARTED_provider {
}
state "suspension" as suspension_provider {
state "SUSPENDING" as SUSPENDING_provider {
}
state "SUSPENDED" as SUSPENDED_provider {
}
state "RESUMING" as RESUMING_provider {
}
STARTED_provider --> SUSPENDING_provider
SUSPENDING_provider --> SUSPENDED_provider
SUSPENDED_provider --> RESUMING_provider
RESUMING_provider --> STARTING_provider
}

state "COMPLETING" as COMPLETING_provider {
}
state "COMPLETED" as COMPLETED_provider {
}
state "provision" as provision_provider {
  state "PROVISIONING" as PROVISIONING_provider {
  }
  state "PROVISIONED_REQUESTED" as PROVISIONED_REQUESTED_provider {
  }
  state "PROVISIONED" as PROVISIONED_provider {
  }
  PROVISIONING_provider --> PROVISIONED_REQUESTED_provider : async provisioning
  PROVISIONED_REQUESTED_provider --> PROVISIONED_provider
  PROVISIONING_provider --> PROVISIONED_provider
}
state "TERMINATING" as TERMINATING_provider {
}
state "TERMINATED" as TERMINATED_provider {
}

state CONSUMER ##[dotted] {
  state "INITIAL" as INITIAL_consumer {
  }
  state "STARTING" as STARTING_consumer {
  }
  state "STARTED" as STARTED_consumer {
  }
  state "SUSPENDING" as SUSPENDING_consumer {
  }
  state "SUSPENDED" as SUSPENDED_consumer {
  }
  state "RESUMING" as RESUMING_consumer {
  }
  state "COMPLETING" as COMPLETING_consumer {
  }
  state "COMPLETED" as COMPLETED_consumer {
  }
  state "TERMINATING" as TERMINATING_consumer {
  }
  state "TERMINATED" as TERMINATED_consumer {
  }

  INITIAL_consumer -[hidden]-> REQUESTING : used for layout
  REQUESTING -[hidden]-> STARTING_consumer : used for layout
  STARTING_consumer -[hidden]-> STARTED_consumer : used for layout
  STARTED_consumer -[hidden]-> SUSPENDING_consumer : used for layout
  SUSPENDING_consumer -[hidden]-> SUSPENDED_consumer : used for layout
  SUSPENDED_consumer -[hidden]-> COMPLETING_consumer : used for layout
  SUSPENDED_consumer -[hidden]-> RESUMING_consumer : used for layout
  RESUMING_consumer -[hidden]-> COMPLETING_consumer : used for layout
  RESUMING_consumer -[hidden]-> TERMINATING_consumer : used for layout
  COMPLETING_consumer -[hidden]-> COMPLETED_consumer : used for layout
  TERMINATING_consumer -[hidden]-> TERMINATED_consumer : used for layout

  REQUESTING -[dashed]-> INITIAL_provider : sends\n**TransferRequestMessage**\nmessage
  SUSPENDING_consumer -[dashed]-> SUSPENDED_provider : sends\n**TransferSuspensionMessage**\nmessage
  RESUMING_consumer -[dashed]-> STARTING_provider : sends\n**TransferStartMessage**\nmessage
  COMPLETING_consumer -[dashed]-> COMPLETED_provider : sends\n**TransferCompletionMessage**\nmessage
  TERMINATING_consumer -[dashed]-> TERMINATED_provider : sends\n**TransferTerminationMessage**\nmessage

' incoming messages
  STARTING_provider -right[dashed]-> STARTED_consumer : sends\n**TransferStartMessage**\nmessage
  SUSPENDING_provider -right[dashed]-> SUSPENDED_consumer : sends\n**TransferSuspensionMessage**\nmessage
  RESUMING_provider -right[dashed]-> STARTING_consumer : sends\n**TransferStartMessage**\nmessage
  COMPLETING_provider -right[dashed]-> COMPLETED_consumer : sends\n**TransferCompletionMessage**\nmessage
  TERMINATING_provider -right[dashed]-> TERMINATED_consumer : sends\n**TransferTerminationMessage**\nmessage
}

INITIAL_provider --> PROVISIONING_provider
PROVISIONED_provider --> STARTING_provider
STARTING_provider --> STARTED_provider

STARTED_provider --> COMPLETING_provider
COMPLETING_provider --> COMPLETED_provider

COMPLETED_provider --> DEPROVISIONING

STARTED_provider -[hidden]-> TERMINATING_provider : used for layout
TERMINATING_provider --> TERMINATED_provider
TERMINATED_provider --> DEPROVISIONING



state deprovision {
    state DEPROVISIONING {
    }
    state DEPROVISIONED {
    }
    DEPROVISIONING --> DEPROVISIONED_REQUESTED : async provisioning
    DEPROVISIONED_REQUESTED --> DEPROVISIONED
    DEPROVISIONING --> DEPROVISIONED
}

@enduml
